{
  "name": "Complete - Mini loveable - dalle 2",
  "nodes": [
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are an expert web designer generating HTML websites. You always follow Apple's style of design."
            },
            {
              "content": "=[\n  {\n    \"role\": \"user\",\n    \"content\": \"You are generating a landing page. The topic and content must fully reflect this description:\\n\\n{{ $('Prepare Chat Prompt with Memory').item.json.prompt }}\\n\\nIf {{ $('Prepare Chat Prompt with Memory').item.json.current_html }} exists, apply the userâ€™s changes to that HTML. If not, create a new HTML page from scratch.\\n\\nImportant:\\n- The pageâ€™s **headline, subheadline, and feature text** should clearly relate to the given topic above. Avoid generic placeholder text like 'Feature One'.\\n- Use this image for the hero section: {{ $json.hero_image }} (as a CSS background or <img> tag).\\n- Include a clean, modern hero section (full-width background, large bold headline, short subheadline, and two call-to-action buttons).\\n- Add a top navigation bar (logo left, 2â€“3 links like About, Team).\\n- Include a three-card section with icons, rounded corners, shadows, and soft hover effects.\\n- Use bright, friendly colors (warm oranges, soft blues, light backgrounds) and clean sans-serif fonts.\\n- Put all CSS inside a single <style> tag (no external CSS or JS).\\n- Output **only** the final HTML (no markdown, no comments).\"\n  }\n]\n"
            }
          ]
        },
        "simplifyOutput": false,
        "options": {},
        "requestOptions": {}
      },
      "id": "9cfa100f-8705-417a-bed6-5724312075f4",
      "name": "Generate HTML (OpenAI)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        1216,
        256
      ],
      "credentials": {
        "openAiApi": {
          "id": "7mHb4eCxjT2Cduv4",
          "name": "OpenAI - upworkers"
        }
      }
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1296,
        256
      ],
      "id": "10e194b3-5d28-455b-be23-8c62f3b37bd1",
      "name": "Chat input",
      "webhookId": "a9e23b8b-588a-4262-846b-838939d3272b"
    },
    {
      "parameters": {
        "message": "=Hereâ€™s your live page:\n{{ $json.deployment_url }}\n",
        "waitUserReply": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        3184,
        256
      ],
      "id": "c1a0e0d3-bdb4-4dfb-ab78-a52583c459e3",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.vercel.com/v13/deployments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2144,
        256
      ],
      "id": "c80da925-a811-448a-bfb1-b8533863765e",
      "name": "Deploy to Vercel",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "model": "dall-e-2",
        "prompt": "={{ $json.message.content }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -176,
        256
      ],
      "id": "025b07d1-5273-4e11-ab27-93e55c37dcea",
      "name": "Generate an image",
      "credentials": {
        "openAiApi": {
          "id": "7mHb4eCxjT2Cduv4",
          "name": "OpenAI - upworkers"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.vercel.com/v6/deployments?limit=1000",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -640,
        832
      ],
      "id": "a4e768dc-899e-45f7-9ebf-454c80310b1c",
      "name": "list deployments",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const d = (items[0].json.deployments || [])\n  .sort((a, b) => b.created - a.created)\n  .slice(0); // keep 2 newest\nreturn d.map(x => ({ json: { uid: x.uid, createdAt: x.created } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        832
      ],
      "id": "541e2308-33af-4046-9685-159f0292926c",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.vercel.com/v6/deployments/{{$json.uid}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -192,
        832
      ],
      "id": "8c1463d9-2e1c-4c67-857b-bd42e560513b",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "content": "> ## **ðŸ§¹ Optional Cleanup Flow (Vercel Deployments)**\n> ## Deletes older Vercel deployments, keeping only the two most recent.\n> ## Update your Vercel Header Auth credentials before running.\n> ## Use with caution â€” this permanently deletes older deployments.",
        "height": 336,
        "width": 1312,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -768,
        656
      ],
      "typeVersion": 1,
      "id": "9427bd9a-7594-4f38-9770-ebcae29c0f47",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c3NWTExzLAJw5QeR",
          "mode": "list",
          "cachedResultName": "html_memory_mini_loveable",
          "cachedResultUrl": "/projects/cisuTMhblpNeiKpl/datatables/c3NWTExzLAJw5QeR"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "sessionID",
              "keyValue": "={{ $json.sessionId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -1056,
        256
      ],
      "id": "ae44c1a7-0a2e-4542-9e25-12f9a79e3d76",
      "name": "Get memory for current session",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## Step 1 â€“ Fetch existing memory and prepare prompt\n\nRetrieves previously stored session data and combines it with the userâ€™s latest chat input.\n### ðŸ”§ Edit Required: Update the data table name (e.g., html_memory_mini_loveable) to your own memory table. \n### Ensure the table has columns sessionID and html",
        "height": 432,
        "width": 528
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1136,
        0
      ],
      "typeVersion": 1,
      "id": "a582ea6a-1d16-45db-aee3-489f7a15de5d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "// Merge Chat Input + Get row(s) data\n\n// Get chat message from the Chat Input node\nconst chatNode = $node[\"Chat input\"].json;\nconst userMessage = (chatNode.chatInput || \"\").trim();\n\n// Get any existing HTML (if available) from Get row(s)\nconst getRowData = $node[\"Get memory for current session\"].json;\nconst currentHtml = getRowData.html || \"\";\n\n// If user says \"start new\", clear previous HTML\nlet finalHtml = currentHtml;\nif (userMessage.toLowerCase().includes(\"start new\")) {\n  finalHtml = \"\";\n}\n\n// Pass both values forward\nreturn [\n  {\n    json: {\n      prompt: userMessage,\n      current_html: finalHtml,\n      sessionId: chatNode.sessionId,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -768,
        256
      ],
      "id": "d649e12b-161d-49c6-8850-808317da01f4",
      "name": "Prepare Chat Prompt with Memory"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are a prompt generator for DALLÂ·E. Convert the userâ€™s landing-page idea into ONE concise, vivid scene description for a website hero image. Include composition, setting, lighting, color palette, mood, style. Exclude any UI text, logos, or typography. Output ONLY the description textâ€”no preface or formatting.",
              "role": "system"
            },
            {
              "content": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {
          "maxTokens": 120,
          "temperature": 0.6
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -528,
        256
      ],
      "id": "ed773e87-f664-4a37-8411-7fda827b5011",
      "name": "Generate Image Prompt",
      "credentials": {
        "openAiApi": {
          "id": "7mHb4eCxjT2Cduv4",
          "name": "OpenAI - upworkers"
        }
      }
    },
    {
      "parameters": {
        "content": "## Step 2 â€“ Generate image prompt and create hero image\n\nUses GPT-4o-mini to craft a vivid scene description and then generates a hero image using DALLÂ·E 2.\n### ðŸ”§ Edit Required: Replace the OpenAI credential with your own API key. \n### You can switch the model to adjust image quality or cost.",
        "height": 432,
        "width": 512
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -560,
        0
      ],
      "typeVersion": 1,
      "id": "92281864-f075-4ee0-8d29-7931cb8ca59b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        96,
        256
      ],
      "id": "36a0a0e2-3d82-427f-a56d-8c1f0a9f8148",
      "name": "Convert Image to Base64"
    },
    {
      "parameters": {
        "content": "## Step 3 â€“ Process image for upload\nConverts the generated image into a Base64 string and then wraps it as a valid data:image/png;base64,â€¦ URI for upload or preview.",
        "height": 432,
        "width": 512
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        16,
        16
      ],
      "typeVersion": 1,
      "id": "a649ab1f-a4fa-4e0b-b47c-6ea07da1178a",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b52ab16-98e6-458c-a904-36edb9be67fd",
              "name": "file",
              "value": "={{ 'data:image/png;base64,' + $json.data }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        368,
        256
      ],
      "id": "27e629ac-160d-4056-90d9-e8cf7895dbf3",
      "name": "Format Image as Data URI"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/<your_cloud_key>/image/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "={{$json.file}}"
            },
            {
              "name": "upload_preset",
              "value": "unsigned_upload"
            },
            {
              "name": "folder",
              "value": "ai_websites/landing_pages"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        624,
        256
      ],
      "id": "fa2cf73b-dcd9-46cc-b788-faa9bc965b4a",
      "name": "Upload Image to Cloudinary"
    },
    {
      "parameters": {
        "content": "## Step 4 â€“ Upload image to Cloudinary and return link\n\nUploads the Base64-encoded image to Cloudinary and outputs the public image URL.\n### ðŸ”§ Edit Required:\n### Replace <your_cloud_key> in the URL with your actual Cloudinary cloud name.\n",
        "height": 432,
        "width": 528
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        560,
        16
      ],
      "typeVersion": 1,
      "id": "bb55afb5-43f1-4cc5-bed2-b14b228dec32",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "return {\n  \"hero_image\": $input.first().json.url\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        912,
        256
      ],
      "id": "d8de8a3a-c25a-4a22-911c-7b986b0ba579",
      "name": "Return Hero Image URL"
    },
    {
      "parameters": {
        "content": "## Step 5 â€“ Generate landing page HTML\n\nGenerates a responsive landing-page HTML layout using GPT-4o-mini based on the userâ€™s topic and design input.\n### ðŸ”§ Edit Required:\n\n### Update the OpenAI credential to your own.\n\nOptionally switch to GPT-4o or Gemini 2.5 Flash for richer, more creative HTML output.",
        "height": 592,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1136,
        -128
      ],
      "typeVersion": 1,
      "id": "5d4643bf-a4f3-4d46-abf9-d7933e295e78",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## Step 6 â€“ Save HTML to memory and prepare for deployment\n\nSave HTML to Memory Table, Prepare Vercel Deployment Payload\nStores the generated HTML for the current session and prepares a clean JSON payload for Vercel deployment.\n### ðŸ”§ Edit Required:\n### Replace the data table name (e.g., html_memory_mini_loveable) with your own.",
        "height": 512,
        "width": 528
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        -16
      ],
      "typeVersion": 1,
      "id": "5d6fd876-078f-42e4-acc2-dcdbadebf36e",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "## Step 7 â€“ Deploy site to Vercel\nDeploys the generated HTML to Vercel, retrieves the new deployment URL, makes it public, and formats it for easy sharing.\n### ðŸ”§ Edit Required:\n\n### Update the Vercel API credential or Header Auth token with your accountâ€™s access token.",
        "height": 496,
        "width": 1056
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2048,
        16
      ],
      "typeVersion": 1,
      "id": "76a04f35-65be-4c41-843a-bbcdac040187",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "c3NWTExzLAJw5QeR",
          "mode": "list",
          "cachedResultName": "html_memory_mini_loveable",
          "cachedResultUrl": "/projects/cisuTMhblpNeiKpl/datatables/c3NWTExzLAJw5QeR"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "sessionID",
              "keyValue": "={{ $('Chat input').item.json.sessionId }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "html": "={{ $json.choices[0].message.content }}",
            "sessionID": "={{ $('Chat input').item.json.sessionId }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionID",
              "displayName": "sessionID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "html",
              "displayName": "html",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        1520,
        256
      ],
      "id": "16f3d8a7-9020-4b01-8d4e-64145715ba90",
      "name": "Save HTML to Memory Table"
    },
    {
      "parameters": {
        "functionCode": "// --- Get the HTML content from the OpenAI node ---\nconst html =\n  $node[\"Generate HTML (OpenAI)\"].json?.choices?.[0]?.message?.content ??\n  $json.html ??\n  \"\";\n\n// --- Clean out markdown fences if they exist ---\nconst cleanedHtml = html\n  .replace(/^```(?:html)?/i, \"\")\n  .replace(/```$/, \"\")\n  .trim();\n\n// --- Return payload for Vercel deployment ---\nreturn [\n  {\n    json: {\n      name: `ai-site-${Date.now()}`,\n      files: [\n        {\n          file: \"index.html\",\n          data: cleanedHtml, // raw HTML string; Vercel accepts this\n        },\n      ],\n      projectSettings: { framework: null },\n      target: \"production\",\n    },\n  },\n];\n"
      },
      "id": "3389c9d0-cd3f-4fe9-89df-e0abdf20f2f1",
      "name": "Prepare Vercel Deployment Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1808,
        256
      ]
    },
    {
      "parameters": {
        "url": "https://api.vercel.com/v6/deployments?limit=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2416,
        256
      ],
      "id": "cdaf6bb4-98ad-4446-a11d-77adf2da2bda",
      "name": "Fetch Latest Deployment URL1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.vercel.com/v9/projects/{{ $json.deployments[0].projectId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"ssoProtection\": null,\n  \"passwordProtection\": null\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2688,
        256
      ],
      "id": "e51f5873-22c8-4aca-9d21-913b6d4cd345",
      "name": "Make Deployment URL Public",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5bb0cd69-a7a4-45a1-9d64-77b937fb8920",
              "name": "deployment_url",
              "value": "={{ 'https://' + $('Fetch Latest Deployment URL1').item.json.deployments[0].url}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2960,
        256
      ],
      "id": "a641a64c-7313-477c-9d39-a2d4d31f0158",
      "name": "Format Deployment URL"
    },
    {
      "parameters": {
        "content": "# ðŸ§  Mini Loveable - AI Landing Page Generator\n\n## Purpose\n\nThis workflow turns a simple text idea into a fully designed and hosted **AI-generated landing page** â€” complete with a hero image, generated HTML, and live deployment on Vercel.\n\n## How It Works\n\nIt retrieves or creates session memory, generates a DALLÂ·E-style hero image, builds responsive landing-page HTML with GPT-4o-mini, saves it to an n8n data table, and then deploys the finished page to **Vercel**, returning a public live URL in minutes.\n\n## Requirements\n\n* âœ… **OpenAI** account â€” for GPT and DALLÂ·E image generation\n* âœ… **Cloudinary** account â€” for hosting generated images\n* âœ… **Vercel** account â€” for live deployment\n* âœ… **n8n Data Table** with at least two columns:\n  * `sessionID` â€” text or string\n  * `html` â€” long text or string\n\n## Setup Notes\n\nInline notes are added throughout the workflow to highlight where you need to update your own details â€” such as **OpenAI API key**, **Cloudinary cloud name**, **table name**, and **Vercel token**.\nOnce these are configured, the workflow runs end-to-end automatically and publishes a fully functional landing page generated by AI.",
        "height": 832,
        "width": 608
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1968,
        -16
      ],
      "typeVersion": 1,
      "id": "5087eec1-7e30-419b-b77d-80fa97e47cce",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "Generate HTML (OpenAI)": {
      "main": [
        [
          {
            "node": "Save HTML to Memory Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat input": {
      "main": [
        [
          {
            "node": "Get memory for current session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy to Vercel": {
      "main": [
        [
          {
            "node": "Fetch Latest Deployment URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate an image": {
      "main": [
        [
          {
            "node": "Convert Image to Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list deployments": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get memory for current session": {
      "main": [
        [
          {
            "node": "Prepare Chat Prompt with Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Chat Prompt with Memory": {
      "main": [
        [
          {
            "node": "Generate Image Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Image Prompt": {
      "main": [
        [
          {
            "node": "Generate an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Image to Base64": {
      "main": [
        [
          {
            "node": "Format Image as Data URI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Image as Data URI": {
      "main": [
        [
          {
            "node": "Upload Image to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Image to Cloudinary": {
      "main": [
        [
          {
            "node": "Return Hero Image URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Hero Image URL": {
      "main": [
        [
          {
            "node": "Generate HTML (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save HTML to Memory Table": {
      "main": [
        [
          {
            "node": "Prepare Vercel Deployment Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Vercel Deployment Payload": {
      "main": [
        [
          {
            "node": "Deploy to Vercel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Latest Deployment URL1": {
      "main": [
        [
          {
            "node": "Make Deployment URL Public",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make Deployment URL Public": {
      "main": [
        [
          {
            "node": "Format Deployment URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Deployment URL": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8c3559bf-b926-49a9-9644-4617b68fc813",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b7d2b0e413b9bc96be579656dd7a55bd3fdcbd67fd6e114509b04dda69944a65"
  },
  "id": "C6zr6O0PXpnXI06I",
  "tags": []
}
