{
  "name": "Mini loveable",
  "nodes": [
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are an expert web designer generating HTML websites. You always follow Apple's style of design."
            },
            {
              "content": "=[\n  {\n    \"role\": \"user\",\n    \"content\": \"You are generating a landing page. The topic and content must fully reflect this description:\\n\\n{{ $('Code in JavaScript').item.json.prompt }}\\n\\nIf {{ $('Code in JavaScript').item.json.current_html }} exists, apply the user’s changes to that HTML. If not, create a new HTML page from scratch.\\n\\nImportant:\\n- The page’s **headline, subheadline, and feature text** should clearly relate to the given topic above. Avoid generic placeholder text like 'Feature One'.\\n- Use this image for the hero section: {{ $json.hero_image }} (as a CSS background or <img> tag).\\n- Include a clean, modern hero section (full-width background, large bold headline, short subheadline, and two call-to-action buttons).\\n- Add a top navigation bar (logo left, 2–3 links like About, Team).\\n- Include a three-card section with icons, rounded corners, shadows, and soft hover effects.\\n- Use bright, friendly colors (warm oranges, soft blues, light backgrounds) and clean sans-serif fonts.\\n- Put all CSS inside a single <style> tag (no external CSS or JS).\\n- Output **only** the final HTML (no markdown, no comments).\"\n  }\n]\n"
            }
          ]
        },
        "simplifyOutput": false,
        "options": {},
        "requestOptions": {}
      },
      "id": "9cfa100f-8705-417a-bed6-5724312075f4",
      "name": "Generate HTML (OpenAI)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        944,
        256
      ],
      "credentials": {
        "openAiApi": {
          "id": "7mHb4eCxjT2Cduv4",
          "name": "OpenAI - upworkers"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// --- Get the HTML content from the OpenAI node ---\nconst html =\n  $node[\"Generate HTML (OpenAI)\"].json?.choices?.[0]?.message?.content ??\n  $json.html ??\n  \"\";\n\n// --- Clean out markdown fences if they exist ---\nconst cleanedHtml = html\n  .replace(/^```(?:html)?/i, \"\")\n  .replace(/```$/, \"\")\n  .trim();\n\n// --- Return payload for Vercel deployment ---\nreturn [\n  {\n    json: {\n      name: `ai-site-${Date.now()}`,\n      files: [\n        {\n          file: \"index.html\",\n          data: cleanedHtml, // raw HTML string; Vercel accepts this\n        },\n      ],\n      projectSettings: { framework: null },\n      target: \"production\",\n    },\n  },\n];\n"
      },
      "id": "3389c9d0-cd3f-4fe9-89df-e0abdf20f2f1",
      "name": "Prepare Vercel Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1392,
        256
      ]
    },
    {
      "parameters": {
        "url": "https://api.vercel.com/v6/deployments?limit=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1840,
        256
      ],
      "id": "cdaf6bb4-98ad-4446-a11d-77adf2da2bda",
      "name": "Fetch Deployment URL",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5bb0cd69-a7a4-45a1-9d64-77b937fb8920",
              "name": "deployment_url",
              "value": "={{ 'https://' + $('Fetch Deployment URL').item.json.deployments[0].url}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2288,
        256
      ],
      "id": "a641a64c-7313-477c-9d39-a2d4d31f0158",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1200,
        256
      ],
      "id": "10e194b3-5d28-455b-be23-8c62f3b37bd1",
      "name": "Chat input",
      "webhookId": "a9e23b8b-588a-4262-846b-838939d3272b"
    },
    {
      "parameters": {
        "jsCode": "// Merge Chat Input + Get row(s) data\n\n// Get chat message from the Chat Input node\nconst chatNode = $node[\"Chat input\"].json;\nconst userMessage = (chatNode.chatInput || \"\").trim();\n\n// Get any existing HTML (if available) from Get row(s)\nconst getRowData = $node[\"Get row(s)\"].json;\nconst currentHtml = getRowData.html || \"\";\n\n// If user says \"start new\", clear previous HTML\nlet finalHtml = currentHtml;\nif (userMessage.toLowerCase().includes(\"start new\")) {\n  finalHtml = \"\";\n}\n\n// Pass both values forward\nreturn [\n  {\n    json: {\n      prompt: userMessage,\n      current_html: finalHtml,\n      sessionId: chatNode.sessionId,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        256
      ],
      "id": "d649e12b-161d-49c6-8850-808317da01f4",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "c3NWTExzLAJw5QeR",
          "mode": "list",
          "cachedResultName": "html_memory_prince",
          "cachedResultUrl": "/projects/cisuTMhblpNeiKpl/datatables/c3NWTExzLAJw5QeR"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "sessionID",
              "keyValue": "={{ $('Chat input').item.json.sessionId }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "html": "={{ $json.choices[0].message.content }}",
            "sessionID": "={{ $('Chat input').item.json.sessionId }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionID",
              "displayName": "sessionID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "html",
              "displayName": "html",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        1168,
        256
      ],
      "id": "16f3d8a7-9020-4b01-8d4e-64145715ba90",
      "name": "Upsert row(s)"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "c3NWTExzLAJw5QeR",
          "mode": "list",
          "cachedResultName": "html_memory_prince",
          "cachedResultUrl": "/projects/cisuTMhblpNeiKpl/datatables/c3NWTExzLAJw5QeR"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "sessionID",
              "keyValue": "={{ $json.sessionId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -976,
        256
      ],
      "id": "ae44c1a7-0a2e-4542-9e25-12f9a79e3d76",
      "name": "Get row(s)",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "message": "=Here’s your live page:\n{{ $json.deployment_url }}\n",
        "waitUserReply": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        2512,
        256
      ],
      "id": "c1a0e0d3-bdb4-4dfb-ab78-a52583c459e3",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.vercel.com/v13/deployments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1616,
        256
      ],
      "id": "c80da925-a811-448a-bfb1-b8533863765e",
      "name": "Deploy to Vercel",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return {\n  \"hero_image\": $input.first().json.url\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        256
      ],
      "id": "d8de8a3a-c25a-4a22-911c-7b986b0ba579",
      "name": "{   \"hero_image\": \"https://your-public-cdn.com/path/to/image.jpg\" }"
    },
    {
      "parameters": {
        "resource": "image",
        "model": "dall-e-2",
        "prompt": "={{ $json.message.content }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -176,
        256
      ],
      "id": "025b07d1-5273-4e11-ab27-93e55c37dcea",
      "name": "Generate an image",
      "credentials": {
        "openAiApi": {
          "id": "7mHb4eCxjT2Cduv4",
          "name": "OpenAI - upworkers"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b52ab16-98e6-458c-a904-36edb9be67fd",
              "name": "file",
              "value": "={{ 'data:image/png;base64,' + $json.data }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        272,
        256
      ],
      "id": "27e629ac-160d-4056-90d9-e8cf7895dbf3",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        48,
        256
      ],
      "id": "36a0a0e2-3d82-427f-a56d-8c1f0a9f8148",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/djfevvz1l/image/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "={{$json.file}}"
            },
            {
              "name": "upload_preset",
              "value": "unsigned_upload"
            },
            {
              "name": "folder",
              "value": "ai_websites/landing_pages"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        496,
        256
      ],
      "id": "fa2cf73b-dcd9-46cc-b788-faa9bc965b4a",
      "name": "Upload image to cloudinary"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are a prompt generator for DALL·E. Convert the user’s landing-page idea into ONE concise, vivid scene description for a website hero image. Include composition, setting, lighting, color palette, mood, style. Exclude any UI text, logos, or typography. Output ONLY the description text—no preface or formatting.",
              "role": "system"
            },
            {
              "content": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {
          "maxTokens": 120,
          "temperature": 0.6
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -528,
        256
      ],
      "id": "ed773e87-f664-4a37-8411-7fda827b5011",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "7mHb4eCxjT2Cduv4",
          "name": "OpenAI - upworkers"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.vercel.com/v6/deployments?limit=1000",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1024,
        624
      ],
      "id": "a4e768dc-899e-45f7-9ebf-454c80310b1c",
      "name": "list deployments",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const d = (items[0].json.deployments || [])\n  .sort((a, b) => b.created - a.created)\n  .slice(0); // keep 2 newest\nreturn d.map(x => ({ json: { uid: x.uid, createdAt: x.created } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        624
      ],
      "id": "541e2308-33af-4046-9685-159f0292926c",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.vercel.com/v6/deployments/{{$json.uid}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -576,
        624
      ],
      "id": "8c1463d9-2e1c-4c67-857b-bd42e560513b",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.vercel.com/v9/projects/{{ $json.deployments[0].projectId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"ssoProtection\": null,\n  \"passwordProtection\": null\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2064,
        256
      ],
      "id": "e51f5873-22c8-4aca-9d21-913b6d4cd345",
      "name": "Made URL(project) public",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUQy9JgGfpVjfXVg",
          "name": "vercal Header Auth account Matt"
        }
      }
    },
    {
      "parameters": {
        "content": "## Delete all deployments - for clean up",
        "height": 304,
        "width": 864
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1248,
        544
      ],
      "typeVersion": 1,
      "id": "9427bd9a-7594-4f38-9770-ebcae29c0f47",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Generate HTML (OpenAI)": {
      "main": [
        [
          {
            "node": "Upsert row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Vercel Payload": {
      "main": [
        [
          {
            "node": "Deploy to Vercel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Deployment URL": {
      "main": [
        [
          {
            "node": "Made URL(project) public",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat input": {
      "main": [
        [
          {
            "node": "Get row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert row(s)": {
      "main": [
        [
          {
            "node": "Prepare Vercel Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy to Vercel": {
      "main": [
        [
          {
            "node": "Fetch Deployment URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "{   \"hero_image\": \"https://your-public-cdn.com/path/to/image.jpg\" }": {
      "main": [
        [
          {
            "node": "Generate HTML (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate an image": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Upload image to cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload image to cloudinary": {
      "main": [
        [
          {
            "node": "{   \"hero_image\": \"https://your-public-cdn.com/path/to/image.jpg\" }",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Generate an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list deployments": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Made URL(project) public": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ab92235c-29e6-47ab-b3fa-b109d11ea766",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b7d2b0e413b9bc96be579656dd7a55bd3fdcbd67fd6e114509b04dda69944a65"
  },
  "id": "C6zr6O0PXpnXI06I",
  "tags": []
}